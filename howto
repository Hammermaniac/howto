#!/bin/bash

# Declare a book name in the 'books' array under "## Books ##", e.g. books=( "mybook" "git" )
# Then create a file in ~/.common-configs/ using the naming convention: howto.mybook
#
# So the above example points to these files:
#   ~/.common-configs/howto.mybook
#   ~/.common-configs/howto.git

## Books ##
books=( "void" "term" )


# VARIABLES
n=$#
numbooks=${#books[@]}
debug_howto=false
onlybook=false
allbooks=false
legacy=false

# FUNCTIONS
howtomanual() {
	echo 'Create a file in ~/.common-configs/ called howto.<bookname>
	Declare book name in "books" array under the "## Books ##" section, e.g. books=( "mybook" "git" )'
}

displayhelp() {
	echo
	echo "Usage: howto [OPTION]... [STRING1] [STRING2]..."
	echo "Or:    howto [OPTION]... [BOOK_NAME] [STRING1]..."
	echo
	echo "Options:"
	echo
	echo "  -h, --help       Display this help text."
	echo "  -n, --nocolor    Don't use colors with output."
	echo "  -b, --books      Display all book names configured in the script."
	echo "  -o, --onlybook   Only search in the specified book."
	echo "  -a, --allbooks   Search all books simultaneously."
	echo
        echo "Specifying a book name as an argument will search for the given string in the specified book."
        echo "Example, assume book name is 'mybook':"
        echo "howto mybook 'git config'"
	echo
	echo "TIP: Specify a ':' as the search string to print all entries of any book."
	echo
}

readbook() {
	for n do {
                # Escape if we run out of arguments.
		checkargs "$@"
		if [ "$debug_howto" == true ] ; then
			echo "   readbook():               Args: $@"
			echo "   readbook():                Arg: $1"
			echo "   readbook():       Book file is: $book"
			echo
		fi
		# Find supplied argument (keyword) in book and display.
                grep -i "$1" "$book" | while read -r line
                do
			if [ "$debug_howto" == true ] ; then
				echo "   readbook()::grep           Arg: $1"
				echo "   readbook()::grep  Book file is: $book"
			fi
                        if [ "$1" == '' ] ; then
                                break
                        fi
			echo
                        echo -e "\033[36m——————————————————————————————————\033[0m"
                        line=$(printf '%b\n' "$( echo -e "$line" | sed ''/": "/s//:`printf "\033[1;36m——————————————————————————————————\033[0m"`/'' | sed 's/——————————————————————————————————/\n——————————————————————————————————\n/' )")
                        echo -e "$line\n"
                done
                shift
		# If no option was specified, run in freeform mode (i.e legacy).
		# This calls the usebook() function again to check whether the next argument is a book name.
                if [ "$legacy" == true ] ; then
			checkargs "$@"
                        usebook "$@"
                fi
	} done
}

checkargs() {
	# When expected that we have run out of arguments after readbook() it means that we're done and should exit.
	if [ $# -eq 0 ] ; then
		echo
		exit 0
	fi
}

checknoargs() {
	# If using --debug, then display argument count.
	if [ "$debug_howto" == true ] ; then
		echo "checknoargs():     Number of args: $#"
		echo "checknoargs():               Args: $@"
		echo
	fi
	# Check if we do not have remaining arguments to use as search strings in readbook().
	if [ $# -eq 0 ] ; then
		echo -e "Error: No arguments supplied after book."
                displayhelp
                exit 1
	fi
}

usebook() {
	# Test whether the argument is in the 'books' array, then sets the book file as the specified book,
	# Otherwise, use the howto.main book file, /home/$USER/.common-configs/howto.main.
	if [[ "${books[@]}" =~ "$1" ]] ; then
		book="/home/$USER/.common-configs/howto.$1"
		shift
	elif [ -r "/home/$USER/.common-configs/howto.$1" ] ; then
		echo "File '/home/$USER/.common-configs/howto.$1' exists, but $1 isn't configured in the 'books' array inside of this script."
		echo "Please add it in order for the --allbooks feature to work."
		book="/home/$USER/.common-configs/howto.$1"
		shift
	else
		book="/home/$USER/.common-configs/howto.main"
		if [ "$onlybook" == true ] ; then
			echo
			echo "Specified book '$1' does not exist, using $book by default."
			echo "If you've intended to use $book, there is no need to specify -o or --onlybook."
		fi
	fi
        # If using --debug, then display arguments and 'book' (book file).
        if [ "$debug_howto" == true ] ; then
                echo "    usebook():       Book file is: $book"
                echo "    usebook():               Args: $@"
		echo
        fi
	checknoargs "$@"
	readbook "$@"
}

displaybooks() {
	echo
	echo "${books[@]}"
       	echo
}

# Exit if no arguments are supplied, nothing to do.
if [ $# -eq 0 ] ; then
        displayhelp
        exit 1
fi

while [ ! "$#" -eq 0 ]
do
	case "$1" in
		-h|--help) # Display the help text.
			displayhelp # Call the displayhelp function.
			exit 0
			;;
                -d|--debug) # Enable debug messages.
                        debug_howto=true
                        shift
			echo
                        ;;
		-n|--nocolor) # Don't use colors with script output.
			nocolor # Call the nocolor function.
			shift
			;;
		-b|--books) # Display all book names.
			displaybooks
			exit 0
			;;
		-o|--onlybook) # Only search in specific book.
			if [[ "${books[@]}" =~ "$2" ]] ; then
				if [ ! -r "/home/$USER/.common-configs/howto.$2" ] ; then
					echo "File '/home/$USER/.common-configs/howto.$2' does not exist or isn't readable."
					exit 1
				fi
				shift
				book="/home/$USER/.common-configs/howto.$1"
				shift
				checknoargs "$@"
				readbook "$@"
			else
				echo "The book you've specified does not exist."
				echo
				exit 1
			fi
			exit 0
			;;
		-a|--allbooks) # Search all books simultaneously for provided string.
			allbooks=true
			shift
			usebook "$@"
			exit 0
			;;
		--)
			break
			;;
		-*)
			echo "Invalid option: '$1'"
			echo "Try '$0 --help' for more information."
			exit 1
			;;
		*)
			legacy=true
			usebook "$@"
			exit 0
			;;
	esac
done
